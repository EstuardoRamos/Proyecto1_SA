services:
  auth-db:
    image: postgres:16
    container_name: auth-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME:-auth}
      POSTGRES_USER: ${AUTH_DB_USER:-auth}
      POSTGRES_PASSWORD: ${AUTH_DB_PASS:-auth}
    ports:
      - "${AUTH_DB_PORT:-5434}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${AUTH_DB_NAME:-auth} -U ${AUTH_DB_USER:-auth}"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - auth_data:/var/lib/postgresql/data
    networks: [comerdormir-net]


  hotel-db:
    image: postgres:16
    container_name: hotel-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${HOTEL_DB_NAME:-hotel}
      POSTGRES_USER: ${HOTEL_DB_USER:-hotel}
      POSTGRES_PASSWORD: ${HOTEL_DB_PASS:-hotel}
    ports:
      - "${HOTEL_DB_PORT:-5435}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${HOTEL_DB_NAME:-hotel} -U ${HOTEL_DB_USER:-hotel}"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - hotel_data:/var/lib/postgresql/data
    networks: [comerdormir-net]

  restaurante-db:
    image: postgres:16
    container_name: restaurante-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${RESTAURANTE_DB_NAME:-restaurante}
      POSTGRES_USER: ${RESTAURANTE_DB_USER:-restaurante}
      POSTGRES_PASSWORD: ${RESTAURANTE_DB_PASS:-restaurante}
    ports:
      - "${RESTAURANTE_DB_PORT:-5436}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${RESTAURANTE_DB_NAME:-restaurante} -U ${RESTAURANTE_DB_USER:-restaurante}"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - restaurante_data:/var/lib/postgresql/data
    networks: [comerdormir-net]

  reviews-db:
    image: postgres:16
    container_name: reviews-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${REVIEWS_DB_NAME:-reviews}
      POSTGRES_USER: ${REVIEWS_DB_USER:-reviews}
      POSTGRES_PASSWORD: ${REVIEWS_DB_PASS:-reviews}
    ports:
      - "${REVIEWS_DB_PORT:-5437}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${REVIEWS_DB_NAME:-reviews} -U ${REVIEWS_DB_USER:-reviews}"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - reviews_data:/var/lib/postgresql/data
    networks: [comerdormir-net]

  user-db:
      image: postgres:16
      container_name: user-db
      restart: unless-stopped
      environment:
        POSTGRES_DB: ${USER_DB_NAME:-user}
        POSTGRES_USER: ${USER_DB_USER:-user}
        POSTGRES_PASSWORD: ${USER_DB_PASS:-user}
      ports:
        - "${USER_DB_PORT:-5438}:5432"
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -d ${USER_DB_NAME:-user} -U ${USER_DB_USER:-user}"]
        interval: 5s
        timeout: 3s
        retries: 20
      volumes:
        - user_data:/var/lib/postgresql/data
      networks: [comerdormir-net]


  user-app:
      build:
        context: ./user.microservice
        dockerfile: Dockerfile
      image: user-ms:dev
      container_name: user-app
      restart: unless-stopped
      depends_on:
        user-db:
          condition: service_healthy
      environment:
        SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/${USER_DB_NAME:-user}
        SPRING_DATASOURCE_USERNAME: ${USER_DB_USER:-user}
        SPRING_DATASOURCE_PASSWORD: ${USER_DB_PASS:-user}
        SPRING_JPA_HIBERNATE_DDL_AUTO: update
        MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
        MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
        SERVER_PORT: 8080
      ports:
        - "${USER_APP_PORT:-8085}:8080"
      healthcheck:
        test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q UP"]
        interval: 10s
        timeout: 3s
        retries: 15
      networks: [comerdormir-net]

  hotel-app:
    build:
      context: ./hotel.microservice
      dockerfile: Dockerfile
    image: hotel-ms:dev
    container_name: hotel-app
    restart: unless-stopped
    depends_on:
      hotel-db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://hotel-db:5432/${HOTEL_DB_NAME:-hotel}
      SPRING_DATASOURCE_USERNAME: ${HOTEL_DB_USER:-hotel}
      SPRING_DATASOURCE_PASSWORD: ${HOTEL_DB_PASS:-hotel}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
      SPRINGDOC_SWAGGER_UI_URL: /api/hotel/v3/api-docs
      SPRINGDOC_SWAGGER_UI_CONFIG_URL: /api/hotel/v3/api-docs/swagger-config
      SERVER_PORT: 8080
    ports:
      - "${HOTEL_APP_PORT:-8082}:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q UP"]
      interval: 10s
      timeout: 3s
      retries: 15
    networks: [comerdormir-net]

  restaurante-app:
    build:
      context: ./restaurante.microservice
      dockerfile: Dockerfile
    image: restaurante-ms:dev
    container_name: restaurante-app
    restart: unless-stopped
    depends_on:
      restaurante-db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://restaurante-db:5432/${RESTAURANTE_DB_NAME:-restaurante}
      SPRING_DATASOURCE_USERNAME: ${RESTAURANTE_DB_USER:-restaurante}
      SPRING_DATASOURCE_PASSWORD: ${RESTAURANTE_DB_PASS:-restaurante}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
      SPRINGDOC_SWAGGER_UI_URL: /api/rest/v3/api-docs
      SPRINGDOC_SWAGGER_UI_CONFIG_URL: /api/rest/v3/api-docs/swagger-config
      SERVER_PORT: 8080
    ports:
      - "${RESTAURANTE_APP_PORT:-8083}:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q UP"]
      interval: 10s
      timeout: 3s
      retries: 15
    networks: [comerdormir-net]

  reviews-app:
    build:
      context: ./reviews.microservice
      dockerfile: Dockerfile
    image: reviews-ms:dev
    container_name: reviews-app
    restart: unless-stopped
    depends_on:
      reviews-db:
        condition: service_healthy
      hotel-app:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://reviews-db:5432/${REVIEWS_DB_NAME:-reviews}
      SPRING_DATASOURCE_USERNAME: ${REVIEWS_DB_USER:-reviews}
      SPRING_DATASOURCE_PASSWORD: ${REVIEWS_DB_PASS:-reviews}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
      SPRINGDOC_SWAGGER_UI_URL: /api/reviews/v3/api-docs
      SPRINGDOC_SWAGGER_UI_CONFIG_URL: /api/reviews/v3/api-docs/swagger-config
      SERVER_PORT: 8080
      # Base URL del MS Hotel para consultar facturas (usa service discovery via docker network)
      HOTEL_API_BASE_URL: http://hotel-app:8080
    ports:
      - "${REVIEWS_APP_PORT:-8084}:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q UP"]
      interval: 10s
      timeout: 3s
      retries: 15
    networks: [comerdormir-net]
  reportes-app:
    build:
      context: ./reportes.microservice
      dockerfile: Dockerfile
    image: reportes-ms:dev
    container_name: reportes-app
    restart: unless-stopped
    # depends_on eliminado porque no hay DB
    environment:
      # Evita autoconfiguración de JDBC/JPA si tienes starters en el classpath
      SPRING_AUTOCONFIGURE_EXCLUDE: >
        org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,
        org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration

      # Actuator (para el healthcheck)
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"

      # Swagger (ajusta si tu path cambia)
      SPRINGDOC_SWAGGER_UI_URL: /api/rest/v3/api-docs
      SPRINGDOC_SWAGGER_UI_CONFIG_URL: /api/rest/v3/api-docs/swagger-config

      # Puerto interno del contenedor (mantén 8080 si así corre tu app)
      SERVER_PORT: 8080
    ports:
      - "${REPORTES_APP_PORT:-8086}:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q UP"]
      interval: 10s
      timeout: 3s
      retries: 15
    networks: [comerdormir-net]


  pgadmin:
    image: dpage/pgadmin4:8.11
    container_name: pgadmin
    restart: unless-stopped
    environment:
      
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASS:-admin}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - auth-db
      - hotel-db
      - restaurante-db
      - reviews-db
      - user-db
    networks: [comerdormir-net]

networks:
  comerdormir-net:

volumes:
  auth_data:
  hotel_data:
  restaurante_data:
  reviews_data:
  user_data:
  pgadmin_data: